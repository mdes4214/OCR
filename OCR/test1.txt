/**
* ocr.cpp:
* Read the digits from a scratchcard. See the tutorial at
* http://opencv-code.com/tutorials/how-to-read-the-digits-from-a-scratchcard
*
* Compile with:
* g++ -I/usr/local/include -L/usr/local/lib ocr.cpp -o ocr \
*       -lopencv_core -lopencv_imgproc -lopencv_highgui -ltesseract
*/
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/opencv.hpp>
#include <cmath>
#include <tesseract/baseapi.h>
#include <iostream>

using namespace cv;
using namespace std;

int erosion_elem = 0;
int erosion_size = 2;
int dilation_elem = 0;
int dilation_size = 2;
int const max_elem = 2;
int const max_kernel_size = 20;
Mat erosion_dst, dilation_dst, dst_ed, tmp;

void Erosion_Dilation(int, void*)
{
	int erosion_type;
	if (erosion_elem == 0){ erosion_type = MORPH_RECT; }
	else if (erosion_elem == 1){ erosion_type = MORPH_CROSS; }
	else if (erosion_elem == 2) { erosion_type = MORPH_ELLIPSE; }

	Mat element = getStructuringElement(erosion_type,
		Size(2 * erosion_size + 1, 2 * erosion_size + 1),
		Point(erosion_size, erosion_size));
	int dilation_type;
	if (dilation_elem == 0){ dilation_type = MORPH_RECT; }
	else if (dilation_elem == 1){ dilation_type = MORPH_CROSS; }
	else if (dilation_elem == 2) { dilation_type = MORPH_ELLIPSE; }

	Mat element2 = getStructuringElement(dilation_type,
		Size(2 * dilation_size + 1, 2 * dilation_size + 1),
		Point(dilation_size, dilation_size));
	/// Apply the dilation operation
	if (dilation_size != 0)
	{
		dilate(dst_ed, dilation_dst, element2);
		erode(dilation_dst, erosion_dst, element);
	}
	else if (erosion_size != 0)
	{
		erode(dst_ed, erosion_dst, element);
		dilate(erosion_dst, dilation_dst, element2);
	}
	else
		erosion_dst = tmp.clone();


	imshow( "Erosion Demo", erosion_dst );
}

// Covert RGB to CMYK using the formula from
// http://rapidtables.com/convert/color/rgb-to-cmyk.htm
void rgb2cmyk(cv::Mat& src, std::vector<cv::Mat>& cmyk)
{
	CV_Assert(src.type() == CV_8UC3);

	cmyk.clear();
	for (int i = 0; i < 4; ++i)
		cmyk.push_back(cv::Mat(src.size(), CV_32F));

	for (int i = 0; i < src.rows; ++i)
	{
		for (int j = 0; j < src.cols; ++j)
		{
			cv::Vec3b p = src.at<cv::Vec3b>(i, j);

			float r = p[2] / 255.;
			float g = p[1] / 255.;
			float b = p[0] / 255.;
			float k = (1 - max(max(r, g), b));

			cmyk[0].at<float>(i, j) = (1 - r - k) / (1 - k);
			cmyk[1].at<float>(i, j) = (1 - g - k) / (1 - k);
			cmyk[2].at<float>(i, j) = (1 - b - k) / (1 - k);
			cmyk[3].at<float>(i, j) = k;
		}
	}
}

int main(int argc, char *argv[])
{
	cv::Mat im0 = cv::imread(argv[1]);
	if (!im0.data)
		return -1;

	std::vector<cv::Mat> cmyk;
	rgb2cmyk(im0, cmyk);
	
	imshow("cmyk0", cmyk[0]);
	imshow("cmyk1", cmyk[1]);
	imshow("cmyk2", cmyk[2]);
	imshow("cmyk3", cmyk[3]);


	cv::Mat im1;
	//im1 = cmyk[3].mul(1 - cmyk[1]) > 0.25;
	im1 = cmyk[3];
	//im1 = cmyk[3].mul(1 - cmyk[1]);

	imshow("im1", im1);
	
	cv::Mat im2;
	im1.convertTo(im2, CV_8U);
	//cvtColor(im1, im2, CV_8U, CV_RGB2GRAY);

	imshow("im2", im2);
	
	std::vector<std::vector<cv::Point> > contours;
	cv::findContours(im2, contours, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_NONE);
	
	double max_area = 0;
	int max_idx = 0;
	for (int i = 0; i < contours.size(); i++)
	{
		double area = cv::contourArea(contours[i]);
		max_idx = area > max_area ? i : max_idx;
		max_area = area > max_area ? area : max_area;
	}

	im2.setTo(cv::Scalar(0));
	cv::drawContours(im2, contours, max_idx, cv::Scalar(255), -1);

	cv::Mat im3;
	cv::cvtColor(im0, im3, CV_BGR2GRAY);
	im3 = ((255 - im3) & im2) > 200;
	
	
	cv::Mat dst = im3.clone();
	
	cv::findContours(dst.clone(), contours, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_NONE);
	for (int i = 0; i < contours.size(); i++)
	{
		if (cv::contourArea(contours[i]) < 100)
			cv::drawContours(dst, contours, i, cv::Scalar(0), -1);
	}
	
	/*
	dst_ed = im1.clone();
	tmp = im1.clone();
	Erosion_Dilation(0, 0);
	dst_ed = erosion_dst.clone();
	*/
	tesseract::TessBaseAPI tess;
	tess.Init(NULL, "eng", tesseract::OEM_DEFAULT);
	tess.SetVariable("tessedit_char_whitelist", "0123456789qazwsxedcrfvtgbyhnujmikolpQAZWSXEDCCRFVTGBYHNUJMIKOLP");
	//tess.SetVariable("tessedit_char_whitelist", "qazwsxedcrfvtgbyhnujmikolpQAZWSXEDCRFVTGBYHNUJMIKOLP");
	tess.SetPageSegMode(tesseract::PSM_SINGLE_BLOCK);
	tess.SetImage((uchar*)dst.data, dst.cols, dst.rows, 1, dst.cols);

	char* out = tess.GetUTF8Text();
	std::cout << out << std::endl;

	cv::imshow("src", im0);
	cv::imshow("dst", dst);
	cv::waitKey();
	return 0;
}